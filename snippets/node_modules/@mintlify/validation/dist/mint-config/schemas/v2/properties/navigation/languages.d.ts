import { z } from 'zod';
export declare const languageSchema: z.ZodIntersection<z.ZodObject<{
    language: z.ZodEnum<["en", "cn", "es", "fr", "jp", "pt", "pt-BR", "de"]>;
    hidden: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    language: "en" | "cn" | "es" | "fr" | "jp" | "pt" | "pt-BR" | "de";
    hidden?: boolean | undefined;
}, {
    language: "en" | "cn" | "es" | "fr" | "jp" | "pt" | "pt-BR" | "de";
    hidden?: boolean | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    openapi: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">]>;
}, "strip", z.ZodTypeAny, {
    openapi: (string | string[]) & (string | string[] | undefined);
}, {
    openapi: (string | string[]) & (string | string[] | undefined);
}>, z.ZodObject<{
    href: z.ZodString;
}, "strip", z.ZodTypeAny, {
    href: string;
}, {
    href: string;
}>, z.ZodLazy<z.ZodObject<{
    versions: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    versions: any[];
}, {
    versions: any[];
}>>, z.ZodLazy<z.ZodObject<{
    tabs: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    tabs: any[];
}, {
    tabs: any[];
}>>, z.ZodLazy<z.ZodObject<{
    dropdowns: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    dropdowns: any[];
}, {
    dropdowns: any[];
}>>, z.ZodLazy<z.ZodObject<{
    anchors: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    anchors: any[];
}, {
    anchors: any[];
}>>, z.ZodLazy<z.ZodObject<{
    groups: z.ZodArray<z.ZodIntersection<z.ZodObject<{
        group: z.ZodString;
        icon: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
            style: z.ZodOptional<z.ZodEnum<["brands", "duotone", "light", "regular", "sharp-duotone-solid", "sharp-light", "sharp-regular", "sharp-solid", "sharp-thin", "solid", "thin"]>>;
            name: z.ZodEffects<z.ZodString, string, string>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        }, {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        }>]>>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        root: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    }, "strip", z.ZodTypeAny, {
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    }, {
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        openapi: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">]>;
    }, "strip", z.ZodTypeAny, {
        openapi: (string | string[]) & (string | string[] | undefined);
    }, {
        openapi: (string | string[]) & (string | string[] | undefined);
    }>, z.ZodLazy<z.ZodObject<{
        pages: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
    }, "strip", z.ZodTypeAny, {
        pages: any[];
    }, {
        pages: any[];
    }>>]>>, "many">;
}, "strip", z.ZodTypeAny, {
    groups: ({
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    } & ({
        openapi: (string | string[]) & (string | string[] | undefined);
    } | {
        pages: any[];
    }))[];
}, {
    groups: ({
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    } & ({
        openapi: (string | string[]) & (string | string[] | undefined);
    } | {
        pages: any[];
    }))[];
}>>, z.ZodLazy<z.ZodObject<{
    pages: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    pages: any[];
}, {
    pages: any[];
}>>]>>;
export declare const nonRecursiveLanguageSchema: z.ZodIntersection<z.ZodObject<{
    language: z.ZodEnum<["en", "cn", "es", "fr", "jp", "pt", "pt-BR", "de"]>;
    hidden: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    language: "en" | "cn" | "es" | "fr" | "jp" | "pt" | "pt-BR" | "de";
    hidden?: boolean | undefined;
}, {
    language: "en" | "cn" | "es" | "fr" | "jp" | "pt" | "pt-BR" | "de";
    hidden?: boolean | undefined;
}>, z.ZodObject<{
    href: z.ZodString;
}, "strip", z.ZodTypeAny, {
    href: string;
}, {
    href: string;
}>>;
export declare const languagesSchema: z.ZodArray<z.ZodIntersection<z.ZodObject<{
    language: z.ZodEnum<["en", "cn", "es", "fr", "jp", "pt", "pt-BR", "de"]>;
    hidden: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    language: "en" | "cn" | "es" | "fr" | "jp" | "pt" | "pt-BR" | "de";
    hidden?: boolean | undefined;
}, {
    language: "en" | "cn" | "es" | "fr" | "jp" | "pt" | "pt-BR" | "de";
    hidden?: boolean | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    openapi: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">]>;
}, "strip", z.ZodTypeAny, {
    openapi: (string | string[]) & (string | string[] | undefined);
}, {
    openapi: (string | string[]) & (string | string[] | undefined);
}>, z.ZodObject<{
    href: z.ZodString;
}, "strip", z.ZodTypeAny, {
    href: string;
}, {
    href: string;
}>, z.ZodLazy<z.ZodObject<{
    versions: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    versions: any[];
}, {
    versions: any[];
}>>, z.ZodLazy<z.ZodObject<{
    tabs: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    tabs: any[];
}, {
    tabs: any[];
}>>, z.ZodLazy<z.ZodObject<{
    dropdowns: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    dropdowns: any[];
}, {
    dropdowns: any[];
}>>, z.ZodLazy<z.ZodObject<{
    anchors: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    anchors: any[];
}, {
    anchors: any[];
}>>, z.ZodLazy<z.ZodObject<{
    groups: z.ZodArray<z.ZodIntersection<z.ZodObject<{
        group: z.ZodString;
        icon: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
            style: z.ZodOptional<z.ZodEnum<["brands", "duotone", "light", "regular", "sharp-duotone-solid", "sharp-light", "sharp-regular", "sharp-solid", "sharp-thin", "solid", "thin"]>>;
            name: z.ZodEffects<z.ZodString, string, string>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        }, {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        }>]>>;
        hidden: z.ZodOptional<z.ZodBoolean>;
        root: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    }, "strip", z.ZodTypeAny, {
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    }, {
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    }>, z.ZodUnion<[z.ZodObject<{
        openapi: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">]>;
    }, "strip", z.ZodTypeAny, {
        openapi: (string | string[]) & (string | string[] | undefined);
    }, {
        openapi: (string | string[]) & (string | string[] | undefined);
    }>, z.ZodLazy<z.ZodObject<{
        pages: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
    }, "strip", z.ZodTypeAny, {
        pages: any[];
    }, {
        pages: any[];
    }>>]>>, "many">;
}, "strip", z.ZodTypeAny, {
    groups: ({
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    } & ({
        openapi: (string | string[]) & (string | string[] | undefined);
    } | {
        pages: any[];
    }))[];
}, {
    groups: ({
        group: string;
        icon?: string | {
            name: string;
            style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
        } | undefined;
        hidden?: boolean | undefined;
        root?: string | undefined;
    } & ({
        openapi: (string | string[]) & (string | string[] | undefined);
    } | {
        pages: any[];
    }))[];
}>>, z.ZodLazy<z.ZodObject<{
    pages: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
}, "strip", z.ZodTypeAny, {
    pages: any[];
}, {
    pages: any[];
}>>]>>, "many">;
export type LanguagesConfig = z.infer<typeof languagesSchema>;
export type LanguageConfig = z.infer<typeof languageSchema>;
