import { z } from 'zod';
import { hiddenSchema } from '../reusable/hidden.js';
import { hrefSchema } from '../reusable/href.js';
import { openApiSchema } from '../reusable/openapi.js';
import { anchorsSchema } from './anchors.js';
import { dropdownsSchema } from './dropdown.js';
import { groupsSchema } from './groups.js';
import { languagesSchema } from './languages.js';
import { pagesSchema } from './pages.js';
import { tabsSchema } from './tabs.js';
const baseVersionSchema = z.object({
    version: z.string().nonempty().describe('The name of the version'),
    hidden: hiddenSchema.optional(),
});
export const versionSchema = baseVersionSchema.and(z.union([
    z.object({ openapi: openApiSchema }),
    z.object({ href: hrefSchema }),
    z.lazy(() => z.object({ languages: languagesSchema })),
    z.lazy(() => z.object({ tabs: tabsSchema })),
    z.lazy(() => z.object({ dropdowns: dropdownsSchema })),
    z.lazy(() => z.object({ anchors: anchorsSchema })),
    z.lazy(() => z.object({ groups: groupsSchema })),
    z.lazy(() => z.object({ pages: pagesSchema })),
]));
export const nonRecursiveVersionSchema = baseVersionSchema.and(z.object({ href: hrefSchema }));
export const versionsSchema = z.array(versionSchema).describe('Organizing by versions');
