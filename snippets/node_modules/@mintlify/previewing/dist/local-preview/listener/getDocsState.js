var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { validateMintJson, generateOpenApiAnchorsOrTabs, categorizeFilePaths, } from '@mintlify/prebuild';
import { promises as _promises } from 'fs';
import { join } from 'path';
import { CMD_EXEC_PATH, CLIENT_PATH } from '../../constants.js';
const { readFile } = _promises;
export const getDocsState = () => __awaiter(void 0, void 0, void 0, function* () {
    const mintJsonPath = join(CMD_EXEC_PATH, 'mint.json');
    const mintJsonFileContent = yield readFile(mintJsonPath, 'utf8');
    const validationResults = yield validateMintJson(mintJsonFileContent);
    const { openApiFiles } = yield categorizeFilePaths(CMD_EXEC_PATH);
    return yield generateOpenApiAnchorsOrTabs(validationResults.data, openApiFiles, CLIENT_PATH);
});
