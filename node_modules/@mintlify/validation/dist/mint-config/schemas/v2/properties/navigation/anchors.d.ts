import { z } from 'zod';
export declare const anchorSchema: z.ZodType;
export declare const nonRecursiveAnchorSchema: z.ZodIntersection<z.ZodObject<{
    anchor: z.ZodString;
    icon: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
        style: z.ZodOptional<z.ZodEnum<["brands", "duotone", "light", "regular", "sharp-duotone-solid", "sharp-light", "sharp-regular", "sharp-solid", "sharp-thin", "solid", "thin"]>>;
        name: z.ZodEffects<z.ZodString, string, string>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
    }, {
        name: string;
        style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
    }>]>>;
    color: z.ZodOptional<z.ZodObject<{
        light: z.ZodOptional<z.ZodString>;
        dark: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        light?: string | undefined;
        dark?: string | undefined;
    }, {
        light?: string | undefined;
        dark?: string | undefined;
    }>>;
    hidden: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    anchor: string;
    icon?: string | {
        name: string;
        style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
    } | undefined;
    color?: {
        light?: string | undefined;
        dark?: string | undefined;
    } | undefined;
    hidden?: boolean | undefined;
}, {
    anchor: string;
    icon?: string | {
        name: string;
        style?: "brands" | "duotone" | "light" | "regular" | "sharp-duotone-solid" | "sharp-light" | "sharp-regular" | "sharp-solid" | "sharp-thin" | "solid" | "thin" | undefined;
    } | undefined;
    color?: {
        light?: string | undefined;
        dark?: string | undefined;
    } | undefined;
    hidden?: boolean | undefined;
}>, z.ZodObject<{
    href: z.ZodString;
}, "strip", z.ZodTypeAny, {
    href: string;
}, {
    href: string;
}>>;
export declare const anchorsSchema: z.ZodArray<z.ZodType<any, z.ZodTypeDef, any>, "many">;
export type AnchorsConfig = z.infer<typeof anchorsSchema>;
export type AnchorConfig = z.infer<typeof anchorSchema>;
