import { z } from 'zod';
import { hiddenSchema } from '../reusable/hidden.js';
import { hrefSchema } from '../reusable/href.js';
import { openApiSchema } from '../reusable/openapi.js';
import { anchorsSchema } from './anchors.js';
import { dropdownsSchema } from './dropdown.js';
import { groupsSchema } from './groups.js';
import { pagesSchema } from './pages.js';
import { tabsSchema } from './tabs.js';
import { versionsSchema } from './version.js';
const baseLanguageSchema = z.object({
    language: z
        .enum(['en', 'cn', 'es', 'fr', 'jp', 'pt', 'pt-BR', 'de'])
        .describe('The name of the language in the ISO 639-1 format'),
    hidden: hiddenSchema.optional(),
});
export const languageSchema = baseLanguageSchema
    .and(z.union([
    z.object({ openapi: openApiSchema }),
    z.object({ href: hrefSchema }),
    z.lazy(() => z.object({ versions: versionsSchema })),
    z.lazy(() => z.object({ tabs: tabsSchema })),
    z.lazy(() => z.object({ dropdowns: dropdownsSchema })),
    z.lazy(() => z.object({ anchors: anchorsSchema })),
    z.lazy(() => z.object({ groups: groupsSchema })),
    z.lazy(() => z.object({ pages: pagesSchema })),
]))
    .describe('Organizing by languages');
export const nonRecursiveLanguageSchema = baseLanguageSchema.and(z.object({ href: hrefSchema }));
export const languagesSchema = z
    .array(languageSchema)
    .min(1, 'At least one language must be specified')
    .describe('Organizing by languages');
