var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import _ from 'lodash';
import { updateNavigationToDocsConfig } from './updateNavigationToDocsConfig.js';
function updateRounded(config) {
    return config.rounded === 'sharp' ? 'sharp' : 'regular';
}
function updateEyebrows(config) {
    var _a;
    return ((_a = config.eyebrow) === null || _a === void 0 ? void 0 : _a.display) === 'section' ? 'section' : 'breadcrumbs';
}
function updateCodeblocks(config) {
    var _a;
    return ((_a = config.codeBlock) === null || _a === void 0 ? void 0 : _a.mode) === 'dark' ? 'dark' : 'system';
}
function updateApiPlayground(config) {
    var _a, _b, _c, _d;
    const oldMode = (_b = (_a = config.api) === null || _a === void 0 ? void 0 : _a.playground) === null || _b === void 0 ? void 0 : _b.mode;
    const disableProxy = (_d = (_c = config.api) === null || _c === void 0 ? void 0 : _c.playground) === null || _d === void 0 ? void 0 : _d.disableProxy;
    if (!oldMode && disableProxy === undefined)
        return undefined;
    const display = (() => {
        switch (oldMode) {
            case 'show':
                return 'interactive';
            case 'hide':
            case undefined:
                return 'none';
            default:
                return oldMode;
        }
    })();
    const proxy = disableProxy !== undefined ? !disableProxy : undefined;
    return { display, proxy };
}
function updateTopbarPrimary(config) {
    const ctaButton = config.topbarCtaButton;
    if ((ctaButton === null || ctaButton === void 0 ? void 0 : ctaButton.type) === undefined || ctaButton.type === 'link') {
        return {
            type: 'button',
            label: ctaButton === null || ctaButton === void 0 ? void 0 : ctaButton.name,
            href: ctaButton === null || ctaButton === void 0 ? void 0 : ctaButton.url,
        };
    }
    return {
        type: 'github',
        href: ctaButton.url,
    };
}
function updateFont(config) {
    const font = config.font;
    const result = {};
    if (!font)
        return undefined;
    if ('family' in font) {
        return transformFontDetails(font);
    }
    function transformFontDetails(details) {
        const { url } = details, rest = __rest(details, ["url"]);
        return Object.assign(Object.assign({}, rest), (url ? { source: url } : {}));
    }
    if (font.headings) {
        result.heading = transformFontDetails(font.headings);
    }
    if (font.body) {
        result.body = transformFontDetails(font.body);
    }
    return result;
}
function updateFooterSocials(config) {
    var _a, _b, _c;
    if (!((_a = config.footer) === null || _a === void 0 ? void 0 : _a.socials) && !config.footerSocials)
        return undefined;
    const footerSocials = (_c = (_b = config.footer) === null || _b === void 0 ? void 0 : _b.socials) !== null && _c !== void 0 ? _c : config.footerSocials;
    if (Array.isArray(footerSocials)) {
        return footerSocials.reduce((acc, social) => {
            acc[social.type] = social.url;
            return acc;
        }, {});
    }
    return footerSocials;
}
export function upgradeToDocsConfig(config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    const fonts = updateFont(config);
    const playground = updateApiPlayground(config);
    const rounded = updateRounded(config);
    const eyebrows = updateEyebrows(config);
    const codeblocks = updateCodeblocks(config);
    const v2Config = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ $schema: 'https://mintlify.com/docs.json', theme: 'mint', name: config.name, colors: {
            primary: config.colors.primary,
            light: config.colors.light,
            dark: config.colors.dark,
        }, favicon: config.favicon, navigation: updateNavigationToDocsConfig(config) }, (config.openapi ? { openapi: config.openapi } : {})), (config.rounded || config.eyebrow || config.codeBlock
        ? {
            styling: {
                rounded,
                eyebrows,
                codeblocks,
            },
        }
        : {})), { logo: config.logo }), (playground || ((_c = (_b = (_a = config.api) === null || _a === void 0 ? void 0 : _a.request) === null || _b === void 0 ? void 0 : _b.example) === null || _c === void 0 ? void 0 : _c.languages)
        ? {
            api: Object.assign(Object.assign(Object.assign({}, (playground
                ? Object.assign({ display: playground.display }, (playground.proxy !== undefined ? { proxy: playground.proxy } : {})) : {})), (((_f = (_e = (_d = config.api) === null || _d === void 0 ? void 0 : _d.request) === null || _e === void 0 ? void 0 : _e.example) === null || _f === void 0 ? void 0 : _f.languages)
                ? {
                    examples: {
                        languages: config.api.request.example.languages,
                    },
                }
                : {})), (((_g = config.api) === null || _g === void 0 ? void 0 : _g.baseUrl) || ((_j = (_h = config.api) === null || _h === void 0 ? void 0 : _h.auth) === null || _j === void 0 ? void 0 : _j.method)
                ? {
                    mdx: {
                        base: config.api.baseUrl,
                        auth: (_k = config.api.auth) === null || _k === void 0 ? void 0 : _k.method,
                    },
                }
                : {})),
        }
        : {})), (config.modeToggle
        ? {
            appearance: {
                default: (_l = config.modeToggle.default) !== null && _l !== void 0 ? _l : 'system',
                strict: (_m = config.modeToggle.isHidden) !== null && _m !== void 0 ? _m : false,
            },
        }
        : {})), (config.background || config.backgroundImage || config.colors.background
        ? {
            background: Object.assign(Object.assign(Object.assign({}, (config.backgroundImage ? { image: config.backgroundImage } : {})), { decoration: (_o = config.background) === null || _o === void 0 ? void 0 : _o.style }), (config.colors.background
                ? {
                    color: {
                        light: config.colors.background.light,
                        dark: config.colors.background.dark,
                    },
                }
                : {})),
        }
        : {})), { topbar: {
            links: (_p = config.topbarLinks) === null || _p === void 0 ? void 0 : _p.map((item) => {
                if (item.type === 'link' || item.type === undefined) {
                    return {
                        label: item.name,
                        href: item.url,
                    };
                }
                else {
                    return {
                        label: _.capitalize(item.type),
                        href: item.url,
                    };
                }
            }),
            primary: updateTopbarPrimary(config),
        } }), (((_q = config.search) === null || _q === void 0 ? void 0 : _q.prompt)
        ? {
            search: {
                prompt: config.search.prompt,
            },
        }
        : {})), (config.metadata || ((_r = config.seo) === null || _r === void 0 ? void 0 : _r.indexHiddenPages) !== undefined
        ? {
            seo: Object.assign(Object.assign({}, (config.metadata ? { metatags: config.metadata } : {})), { indexing: ((_s = config.seo) === null || _s === void 0 ? void 0 : _s.indexHiddenPages) ? 'navigable' : 'all' }),
        }
        : {})), (config.footer || config.footerSocials
        ? {
            footer: Object.assign(Object.assign({}, (((_t = config.footer) === null || _t === void 0 ? void 0 : _t.socials) || config.footerSocials
                ? { socials: updateFooterSocials(config) }
                : {})), (((_u = config.footer) === null || _u === void 0 ? void 0 : _u.links)
                ? {
                    links: config.footer.links.map((group) => {
                        return {
                            header: group.title,
                            items: group.links.map((link) => {
                                return {
                                    label: link.label,
                                    href: link.url,
                                };
                            }),
                        };
                    }),
                }
                : {})),
        }
        : {})), (config.integrations || config.analytics
        ? {
            integrations: Object.assign(Object.assign(Object.assign(Object.assign({}, config.analytics), (((_v = config.integrations) === null || _v === void 0 ? void 0 : _v.intercom)
                ? {
                    intercom: {
                        appId: config.integrations.intercom,
                    },
                }
                : {})), (((_w = config.integrations) === null || _w === void 0 ? void 0 : _w.frontchat)
                ? {
                    frontchat: {
                        snippetId: config.integrations.frontchat,
                    },
                }
                : {})), (((_x = config.integrations) === null || _x === void 0 ? void 0 : _x.osano)
                ? {
                    osano: {
                        scriptSource: config.integrations.osano,
                    },
                }
                : {})),
        }
        : {})), (fonts ? { fonts } : {}));
    return v2Config;
}
